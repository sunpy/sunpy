language: python

os:
    - linux

stage: Initial tests

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed but can no longer be installed with
# sudo apt-get.
addons:
    apt:
        packages:
            - libatlas-dev
            - liblapack-dev
            - gfortran
            - graphviz
            - texlive-latex-extra
            - dvipng

# Configure the build environment. Global variables are defined for all configurations.
env:
    global:
        - COLUMNS=180
        - PREVIOUS_NUMPY=1.13.3
        - NUMPY_VERSION='stable'
        - ASTROPY_VERSION='stable'
        - MAIN_CMD='python setup.py'
        - SETUP_CMD='test --coverage'
        - CONDA_CHANNELS='sunpy'
        - CONDA_DEPENDENCIES='openjpeg Cython jinja2 scipy matplotlib mock requests beautifulsoup4 sqlalchemy scikit-image pytest-mock lxml pyyaml pandas nomkl pytest-astropy suds-jurko glymur'
        - PIP_DEPENDENCIES='git+https://github.com/sphinx-gallery/sphinx-gallery sphinx-astropy pytest-sugar pytest-rerunfailures pytest-cov sunpy-sphinx-theme hypothesis drms'
        - EVENT_TYPE='push pull_request cron'
        - MPLBACKEND='agg'

stages:
   # Do the install jobs and one offline test, it will not proceed if any fail
   - name: Initial tests
   # Cron only tests
   - name: Cron tests
     if: type = cron
   # Do the rest of the tests
   - name: Comprehensive tests

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
         # We order the jobs, in terms of the maintainers mood
         # Order of tests run in build stages
         - python: 3.6
           stage: Initial tests

        # Comprehensive tests below this line
        # We run --online here because --online-only skips the doctests
         - python: 3.6
           stage: Comprehensive tests
           env: SETUP_CMD="test --online --coverage"

         # Python 3.5 with Astropy 2
         - python: 3.5
           stage: Comprehensive tests
           env: ASTROPY_VERSION='lts' SETUP_CMD="test --skip-docs"

        # Cron tests below this line
         - os: osx
           stage: Cron tests
           language: generic
           env: PYTHON_VERSION=3.6

         - python: 3.6
           stage: Cron tests
           env: ASTROPY_VERSION='dev'

         - python: 3.6
           stage: Cron tests
           env: NUMPY_VERSION='dev'

         - python: 3.6
           stage: Cron tests
           env: NUMPY_VERSION='dev' ASTROPY_VERSION='dev'

         - python: 3.5
           stage: Cron tests
           env: SETUP_CMD='test --figure-only' ASTROPY_VERSION='dev'
                CONDA_DEPENDENCIES='astropy'

         - python: 3.6
           stage: Cron tests
           # Pip Upstream checks
           env: SETUP_COMD='test' CONDA_DEPENDENCIES=''
                PIP_DEPENDENCIES='Cython jinja2 scipy matplotlib mock requests beautifulsoup4 sqlalchemy scikit-image pytest-mock lxml pyyaml pandas hypothesis suds-jurko sphinx-gallery pytest-sugar pytest-rerunfailures sunpy-sphinx-theme glymur pytest-astropy drms'

install:
    - git clone --depth 1 git://github.com/astropy/ci-helpers.git
    - source ci-helpers/travis/setup_conda.sh

before_script:
    # Download the sample data for the online builds only.
    - if [[ $SETUP_CMD == *online-only* ]] || [[ $SETUP_CMD == *remote-data* ]]; then python -m "sunpy.data.sample"; fi
    - if [[ $SETUP_CMD == *--figure* ]]; then conda env create --file sunpy/tests/figure_tests_env_$PYTHON_VERSION.yml; source activate sunpy-figure-tests-$PYTHON_VERSION; python -m "sunpy.data.sample"; fi

script:
    - $MAIN_CMD $SETUP_CMD

after_success:
    - if [[ $SETUP_CMD = *"cov"* ]]; then pip install codecov; codecov; fi

# Notify the IRC channel of build status
notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/d1bf84e1bc1293e4dbc5
      - "https://scalar.vector.im/api/neb/services/hooks/dHJhdmlzLWNpLyU0MENhZGFpciUzQW1hdHJpeC5vcmcvJTIxTWVSZEZwRW9uTG9Dd2hvSGVUJTNBbWF0cml4Lm9yZw"
    on_success: change  # always|never|change
    on_failure: always
    on_start: never

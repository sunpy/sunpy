[tox]
envlist =
    py{37,38,39}{,-oldestdeps,-devdeps,-online,-figure}
    build_docs
    codestyle
isolated_build = true

[testenv]
pypi_filter = file://.test_package_pins.txt
# We use bash in some of our environments so we have to whitelist it.
whitelist_externals=
    /bin/bash
    /usr/bin/bash
# Run the tests in a temporary directory to make sure that we don't import
# sunpy from the source tree
changedir = .tmp/{envname}
# tox environments are constructed with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#
description =
    run tests
    devdeps: with the latest developer version of key dependencies
    oldestdeps: with the oldest supported version of key dependencies
    online: that require remote data (as well as the offline ones)
    hypothesis: using hypothesis (both offline and online)
    figure: runs the figure test suite.
setenv =
    MPLBACKEND = agg
    COLUMNS = 180
    PYTEST_COMMAND = pytest -vvv -s -ra --pyargs sunpy --cov-report=xml --cov=sunpy --cov-config={toxinidir}/setup.cfg {toxinidir}/docs
    devdeps,build_docs,online: HOME = {envtmpdir}
    SUNPY_SAMPLEDIR = {env:SUNPY_SAMPLEDIR:{toxinidir}/.tox/{envname}/sample_data/}
passenv =
    HTTP_PROXY
    HTTPS_PROXY
    NO_PROXY
    CIRCLECI
deps =
    # We need this for some packages.
    setuptools
    # All our tests run in parallel which this plugin allows us to.
    pytest-xdist
    # Since xdist uses stdout in order for it to work, we have to bypass this and use to
    # capture any logging we might put in a test for debugging.
    pytest-logger
    # The devdeps factor is intended to be used to install the latest developer version.
    # of key dependencies.
    devdeps: git+https://github.com/astropy/astropy
    devdeps: git+https://github.com/matplotlib/matplotlib

    # Oldest deps we pin against.
    oldestdeps: astropy<4.1
    oldestdeps: numpy<1.17.0
    oldestdeps: matplotlib<3.0
    oldestdeps: scipy<1.3
    oldestdeps: parfive<1.2
    # These are specific online extras we use to run the online tests.
    online: pytest-rerunfailures
    online: pytest-timeout
    online: astroquery
    hypothesis: astroquery

    # The 32bit and py39 build needs numpy installed before trying to install sunpy due
    # to https://github.com/scikit-image/scikit-image/issues/4261
    32bit,py39: numpy
    # We have to pin this to use a wheel for manylinux2010 to compile
    32bit: cryptography<3.0

    # Figure tests need a tightly controlled environment
    figure-!devdeps: astropy==4.0.3
    figure-!devdeps: matplotlib==3.3.2

# The following indicates which extras_require from setup.cfg will be installed
# We use test and all so we don't install docs when we don't need it (as
# opposed to dev).
extras =
    all
    tests
commands =
    !online-!hypothesis-!figure: {env:PYTEST_COMMAND} {posargs}
    online: {env:PYTEST_COMMAND} --hypothesis-show-statistics --reruns 2 --reruns-delay 15 --timeout=180 --remote-data=any {posargs}
    hypothesis: {env:PYTEST_COMMAND} --hypothesis-show-statistics --remote-data=any -m "hypothesis" {posargs}
    figure: /bin/bash -c "mkdir -p ./figure_test_images; python -c 'import matplotlib as mpl; print(mpl.ft2font.__file__, mpl.ft2font.__freetype_version__, mpl.ft2font.__freetype_build_type__)' > ./figure_test_images/figure_version_info.txt"
    figure: /bin/bash -c "pip freeze >> ./figure_test_images/figure_version_info.txt"
    figure: /bin/bash -c "cat ./figure_test_images/figure_version_info.txt"
    figure: python -c "import sunpy.tests.helpers as h; print(h.get_hash_library_name())"
    figure: {env:PYTEST_COMMAND} -m "mpl_image_compare" --mpl --remote-data=any --mpl-generate-summary=html --mpl-baseline-path=https://raw.githubusercontent.com/sunpy/sunpy-figure-tests/sunpy-master/figures/{envname}/ {posargs}

[testenv:build_docs]
changedir = docs
description = Invoke sphinx-build to build the HTML docs
# Be verbose about the extras rather than using dev for clarity
extras =
  all
  docs
commands =
    sphinx-build -j auto --color -W --keep-going -b html -d _build/.doctrees . _build/html {posargs}
    python -c 'import pathlib; print("Documentation available under file://\{0\}".format(pathlib.Path(r"{toxinidir}") / "docs" / "_build" / "index.html"))'

[testenv:codestyle]
pypi_filter =
skip_install = true
description = Run all style and file checks with pre-commit
deps =
    pre-commit
commands =
    pre-commit install-hooks
    pre-commit run --color always --all-files --show-diff-on-failure

# This env requires tox-conda.
[testenv:py38-conda]
pypi_filter =
basepython = python3.8
extras =
deps =
conda_deps =
    asdf
    astropy
    beautifulsoup4
    conda
    dask
    drms
    extension-helpers
    glymur
    hypothesis
    h5netcdf
    jinja2
    libopenblas>=0.3.12
    lxml
    matplotlib
    numpy
    openjpeg
    pandas
    parfive
    pytest
    pytest-astropy
    pytest-cov
    pytest-mock
    pytest-xdist
    scikit-image
    scipy
    sphinx
    sqlalchemy
    towncrier
    zeep
    pillow
conda_channels = conda-forge
install_command = pip install --no-deps {opts} {packages}
commands =
    conda list
    {env:PYTEST_COMMAND} {posargs}

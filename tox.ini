[tox]
min_version = 4.0
envlist =
    py{39,310,311,312}{,-oldestdeps,-devdeps,-online,-figure,-conda}
    build_docs{,-gallery}
    codestyle
    base_deps

[testenv]
pypi_filter = file://.test_package_pins.txt
allowlist_externals=
    /bin/bash
    /usr/bin/bash
# Run the tests in a temporary directory to make sure that we don't import sunpy from the source tree
changedir = .tmp/{envname}
description =
    run tests
    conda: with the latest conda version of key dependencies
    devdeps: with the latest developer version of key dependencies
    figure: runs the figure test suite.
    oldestdeps: with the oldest supported version of key dependencies
    online: that require remote data (as well as the offline ones)
setenv =
    MPLBACKEND = agg
    SUNPY_SAMPLEDIR = {env:SUNPY_SAMPLEDIR:{toxinidir}/.tox/sample_data/}
    PYTEST_COMMAND = pytest -vvv -r a --pyargs sunpy --cov-report=xml --cov=sunpy --cov-config={toxinidir}/setup.cfg {toxinidir}/docs
    devdeps,build_docs,online: HOME = {envtmpdir}
    PARFIVE_HIDE_PROGRESS = True
    NO_VERIFY_HELIO_SSL = 1
    devdeps: PIP_EXTRA_INDEX_URL = https://pypi.anaconda.org/astropy/simple https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
deps =
    # devdeps is intended to be used to install the latest developer version of key dependencies.
    devdeps: astropy>=0.0.dev0
    devdeps: git+https://github.com/asdf-format/asdf
    devdeps: git+https://github.com/astropy/asdf-astropy
    devdeps: git+https://github.com/astropy/reproject
    devdeps: git+https://github.com/Cadair/parfive
    devdeps: git+https://github.com/sunpy/mpl-animators
    devdeps: git+https://github.com/MAVENSDC/cdflib
    devdeps: matplotlib>=0.0.dev0
    devdeps: numpy>=0.0.dev0
    devdeps: pandas>=0.0.dev0
    # Oldest deps we pin against
    oldestdeps: asdf-astropy<0.1.2
    oldestdeps: asdf<2.9.0
    oldestdeps: astropy<5.1.0
    oldestdeps: beautifulsoup4<4.9.0
    oldestdeps: cdflib<0.3.20
    oldestdeps: dask[array]<2021.5.0
    oldestdeps: drms<0.7
    oldestdeps: glymur<0.9.2
    oldestdeps: h5netcdf<0.12
    oldestdeps: matplotlib<3.6.0
    oldestdeps: numpy<1.22.0
    oldestdeps: opencv-python<4.8.0.72
    oldestdeps: pandas<1.3.0; platform_system!='Darwin' or platform_machine!='arm64'
    # pandas 1.4.0 is the first with wheels for macOS arm64
    oldestdeps: pandas<1.5.0; platform_system=='Darwin' and platform_machine=='arm64'
    oldestdeps: parfive<1.3.0
    oldestdeps: pytest-xdist<2.1
    oldestdeps: pytest<7.0
    oldestdeps: python-dateutil<2.9.0
    oldestdeps: scikit-image<0.19.0; platform_system!='Darwin' or platform_machine!='arm64'
    # scikit-image 0.20 is the first with wheels for macOS arm64
    oldestdeps: scikit-image<0.21.0; platform_system=='Darwin' and platform_machine=='arm64'
    oldestdeps: scipy<1.8.0
    oldestdeps: sqlalchemy<2.0.0
    oldestdeps: tqdm<4.33.0
    oldestdeps: zeep<3.5.0
    # These are specific extras we use to run in specific factors
    online: astroquery
    online: pytest-rerunfailures
    online: pytest-timeout
    online: matplotlib>=3.8
    # Figure tests need a tightly controlled environment
    # These are pinned to the minimum version that we support
    figure-!devdeps: astropy==5.1.1
    figure-!devdeps: matplotlib==3.5.3
    figure-!devdeps: mpl-animators==1.0.0
    figure-!devdeps: numpy<1.23.0
extras =
    all
    tests
commands =
    pip freeze --all --no-input
    oldestdeps: python -c "import astropy.time; astropy.time.update_leap_seconds()"
    !online-!figure: {env:PYTEST_COMMAND} {posargs}
    online: {env:PYTEST_COMMAND} --hypothesis-show-statistics --reruns 2 --reruns-delay 15 --timeout=30 --remote-data=any {posargs}
    figure: /bin/bash -c "mkdir -p ./figure_test_images; python -c 'import matplotlib as mpl; print(mpl.ft2font.__file__, mpl.ft2font.__freetype_version__, mpl.ft2font.__freetype_build_type__)' > ./figure_test_images/figure_version_info.txt"
    figure: /bin/bash -c "pip freeze >> ./figure_test_images/figure_version_info.txt"
    figure: /bin/bash -c "cat ./figure_test_images/figure_version_info.txt"
    figure: python -c "import sunpy.tests.helpers as h; print(h.get_hash_library_name())"
    figure: {env:PYTEST_COMMAND} -m "mpl_image_compare" --mpl --remote-data=any --mpl-generate-summary=html --mpl-baseline-path=https://raw.githubusercontent.com/sunpy/sunpy-figure-tests/sunpy-master/figures/{envname}/ {posargs}

[testenv:build_docs{,-gallery}]
changedir = docs
description = Invoke sphinx-build to build the HTML docs
extras =
    all
    docs
    gallery: docs-gallery
commands =
    pip freeze --all --no-input
    gallery: sphinx-build -j auto --color -W --keep-going -b html -d _build/.doctrees . _build/html {posargs}
    !gallery: sphinx-build -j auto --color -W --keep-going -b html -d _build/.doctrees -D plot_gallery=0 . _build/html {posargs}
    python -c 'import pathlib; print("Documentation available under file://\{0\}".format(pathlib.Path(r"{toxinidir}") / "docs" / "_build" / "index.html"))'

[testenv:codestyle]
pypi_filter =
skip_install = true
description = Run all style and file checks with pre-commit
deps =
    pre-commit
commands =
    pre-commit install-hooks
    pre-commit run --color always --all-files --show-diff-on-failure

[testenv:base_deps]
description = Check the test suite does not fail if all optional dependencies are missing
extras =
deps =
    astropy
    numpy
    parfive[ftp]
commands =
    python -c "import sunpy; sunpy.self_test()"

.. doctest-skip-all

.. _whatsnew-2.1:

************************
What's New in SunPy 2.1?
************************

Overview
========
The SunPy project is pleased to announce the 2.1 release of the sunpy package.

Finding map contours
====================
The new :meth:`sunpy.map.contour` method can be used to extract contours from a map. It returns contours as a `~astropy.coordinates.SkyCoord`, allowing contours to be easily overplotted on the original or other maps.

Map data and units
==================
`~sunpy.map.Map`s now have the ``.unit`` set to the correct `~astropy.units.Unit` if the 'BUNIT' keyword is set in the FITS metadata.

New synoptic map sources and clients
====================================
`~sunpy.map.sources.MDISynopticMap` and `~sunpy.map.sources.HMISynopticMap` have been added as new data sources, and automatically fix common issues with FITS metadata from these sources. You do not need to change any code to use these, as sunpy automatically detects and uses the appropriate map sources for each file.

It is now possible to search for GONG synoptic maps within `sunpy.net.Fido`, using ``a.Instrument('GONG')``.

Requesting cutouts from the JSOC
================================
`~sunpy.net.Fido` can now be used to request cutouts from JSOC via the new ``a.jsoc.Cutout`` attr. This includes the ability to adjust the requested field of view to "track" a feature as it moves across the solar disk, perform sub-pixel image registration, and mask off-disk pixels.

Coordinates with velocities
===========================
It is now supported to transform coordinates with attached velocities, and the various ephemeris functions can optionally include velocity information.
Transformations between coordinate frames will account for both any change in orientation of the velocity vector and any induced velocity due to relative motion between the frames.
For example, consider Mars's position/velocity in `~sunpy.coordinates.frames.HeliographicStonyhurst`::

    >>> from astropy.coordinates import SkyCoord
    >>> from sunpy.coordinates import get_body_heliographic_stonyhurst
    >>> mars = SkyCoord(get_body_heliographic_stonyhurst('mars', '2021-01-01',
    ...                                                  include_velocity=True))
    >>> mars
    <SkyCoord( HeliographicStonyhurst: obstime=2021-01-01T00:00:00.000): (lon, lat, radius) in (deg, deg, AU)
        (-34.46752135, 1.77496469, 1.50936573)
     (d_lon, d_lat, d_radius) in (arcsec / s, arcsec / s, km / s)
        (-0.00048971, 0.00060976, 19.54950062)>
    >>> mars.velocity.norm()
    <Quantity 19.56823076 km / s>

However, `~sunpy.coordinates.frames.HeliographicStonyhurst` is a non-inertial frame that rotates over time.
By transforming this coordinate to `~sunpy.coordinates.frames.HeliocentricInertial`, we can see that Mars's actual velocity is larger::

    >>> mars.heliocentricinertial
    <SkyCoord (HeliocentricInertial: obstime=2021-01-01T00:00:00.000): (lon, lat, distance) in (deg, deg, AU)
        (-9.91128592, 1.77496469, 1.50936573)
     (d_lon, d_lat, d_distance) in (arcsec / s, arcsec / s, km / s)
        (0.04174239, 0.00060976, 19.54950058)>
    >>> mars.heliocentricinertial.velocity.norm()
    <Quantity 49.68592218 km / s>

See :ref:`sunpy-coordinates-velocities` for more information.

Alternatives for reprojecting a Helioprojective map
===================================================
The typical observation in `~sunpy.coordinates.frames.Helioprojective` coordinates does not contain full 3D information for the sources of emission, so an assumption needs to be made when transforming such coordinates to other coordinate frames.
By default, SunPy assumes that the emission is coming from the surface of the Sun, which enables reprojections such as in the example :ref:`sphx_glr_generated_gallery_map_transformations_reprojection_different_observers.py`.
However, this assumption is not appropriate for some observations, e.g., from coronagraphs.

There is now a context manager (:meth:`~sunpy.coordinates.frames.Helioprojective.assume_spherical_screen`) to override the default assumption such that any 2D coordinates are interpreted as being on the inside of a large spherical screen.
See the following example for how this context manager enables alternative reprojections.

.. minigallery:: sunpy.coordinates.Helioprojective.assume_spherical_screen

Performance improvements
========================
Several functions in `sunpy.map.maputils` have been significantly sped up with improved algorithms.

In addition, `sunpy.map.Map.wcs` is now cached when the map metadata remains unchanged, significantly improving performance in applications which make mutiple requests for the map WCS (e.g. plotting), and reducing the number of repeated warnings thrown when metadata is missing.

Support for GOES-16 and GOES-17 X-Ray Sensor (XRS) data
=======================================================
We have now included support for the GOES-16 and GOES-17 XRS 1-second data. This data can now be queried and downloaded with `sunpy.net.Fido` and the files read in and analysed as a `sunpy.timeseries.TimeSeries`.

See the following example for how this can be achieved:

(add example "goes_xrs_example")

Increase in required package versions
=====================================
We have bumped the minimum version of several packages we depend on; these are the new minimum versions for sunpy 2.1:

- python 3.7
- astropy 4.0
- scipy 1.2
- parfive 1.1
- drms 0.6
